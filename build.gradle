plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
	id 'maven-publish'
	id 'idea'
}

version = project.mod_version
group = project.maven_group

repositories {
	maven {
		name = "Ladysnake Mods"
		url = 'https://maven.ladysnake.org/releases'
	}
	maven { url = "https://api.modrinth.com/maven" }
	maven { url 'https://maven.wispforest.io' }
}

base {
	archivesName = project.archives_base_name
}

loom {
    splitEnvironmentSourceSets()

	mods {
		"cardinalclasses" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Cardinal Components API
	// Replace modImplementation with modApi if you expose components in your own API
	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}"
	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}"

	// Includes Cardinal Components API as a Jar-in-Jar dependency (optional but recommended)
	include "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}"
	include "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}"

	// Config
	annotationProcessor modImplementation("io.wispforest:owo-lib:${project.owo_version}")
	include "io.wispforest:owo-sentinel:${project.owo_version}"

	// Jade for debug
	modImplementation "maven.modrinth:jade:10.4.0-fabric,1.19.4"

	// Better Advancements (suggested)
	modImplementation "maven.modrinth:Q2OqKxDG:0.3.1.158-fabric,1.19.4"

	compileOnly 'com.google.guava:guava:33.0.0-jre'
	}

processResources {
	inputs.property "version", project.version
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

def dataOutput = 'src/main/generated'

loom {
	runs {
		datagen {
			server()

			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file(dataOutput)}"

			vmArg "-Dcardinalclasses.datagen.disable"

			runDir "build/datagen"
		}
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

tasks.withType(JavaCompile).configureEach {

	it.options.encoding = 'UTF-8'
	it.options.release = 17
}

// Disables Gradle's custom module metadata from being published to maven. The
// metadata includes mapped dependencies which are not reasonably consumable by
// other mod developers.
tasks.withType(GenerateModuleMetadata).configureEach {
	enabled = false
}

// Duplicate strategy on build
tasks.withType(org.gradle.jvm.tasks.Jar).configureEach {
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

sourceSets { main { resources { srcDirs += dataOutput } } }

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}